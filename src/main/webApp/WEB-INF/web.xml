<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee
                      http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1"
         metadata-complete="true">

    <!-- 作用：tomcat启动时，加载spring的配置文件，初始化ioc容器 -->
    <!-- 默认加载WEB-INF下的xml文件,可用context-param重新指定 -->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <listener>
        <listener-class>listener.sessionExpireListener</listener-class>
    </listener>

    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>
            classpath:applicationContext.xml,
            classpath:applicationContext-mvc.xml
        </param-value>
    </context-param>

    <servlet>
        <servlet-name>springMvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!--
            此处也可以不加此配置，使用默认位置(WEB-INF下)的配置文件，
            不过配置文件名字格式有要求：[servlet-name]-servlet.xml
            对应这里就是/WEB-INF/springMvc-servlet.xml
        -->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:applicationContext-mvc.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <!-- /和/*的区别：
    <url-pattern>/</url-pattern>  会匹配到/login这样的路径型url，不会匹配到模式为*.jsp这样的后缀型url。
    <url-pattern>/*</url-pattern> 会匹配所有url：路径型的和后缀型的url(包括/login,*.jsp,*.js和*.html等)。
    <url-pattern>/</url-pattern> 不会匹配到*.jsp，即：*.jsp不会进入springmvc的 DispatcherServlet类 。
    <url-pattern>/*</url-pattern> 会匹配*.jsp，会出现返回jsp视图时再次进入spring的DispatcherServlet类，导致找不到对应的controller所以报404错。
    -->
    <servlet-mapping>
        <servlet-name>springMvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>
    <!--
        1.配置shiro的shiroFilter。DelegatingFilterProxy是servlet filter的一个代理对象。
        2.默认情况下，spring会到ioc容器中查找filterName对应的bean，也可以通过targetBeanName初始化参数来配置filter bean的id
        3.DelegatingFilterProxy的作用是自动到spring容器查找名字为shiroFilter的bean并把所有filter操作委托给它
    -->
    <filter>
        <filter-name>shiroFilter</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
        <init-param>
            <param-name>targetFilterLifecycle</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>

    <filter-mapping>
        <filter-name>shiroFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <filter>
        <filter-name>studentNameFilter</filter-name>
        <filter-class>filter.StudentNameFilter</filter-class>
        <init-param>
            <param-name>invalidName</param-name>
            <param-value>fuck</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>studentNameFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <welcome-file-list>
        <welcome-file>jsp/index.jsp</welcome-file>
    </welcome-file-list>
</web-app>
